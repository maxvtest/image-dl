<?php

namespace Maxvtest\ImageDl;

/**
 * PHP class to download images by URL.
 * This class considers only HTTP status code 200 the success.
 * It does not redirect to next URL in case of HTTP status code 3xx
 * and regard it as an error.
 * This class does not support SSL verification,
 * therefore you can just disable this verification
 * to be able to download from https.
 * 
 * @author max
 */
class ImageDl
{
    /**
     * The URL of a remote file.
     * @var string
     */
    public $url;
    
    /**
     * The full path of the directory, where the file will be saved.
     * @var string
     */
    public $dir;
    
    /**
     * The name of the created file.
     * @var string
     */
    public $name;
    
    /**
     * Whether to replace existing file with new one.
     * False by default.
     * @var bool
     */
    public $replace;
    
    /**
     * Whether to make directories recursively if they do not exist.
     * True by default.
     * @var bool
     */
    public $mkdir;
    
    /**
     * The permission to be set for the created directory.
     * @var int
     */
    public $dirMode;
    
    /**
     * The permission to be set for the created image.
     * @var int
     */
    public $imgMode;
    
    /**
     * Whether to suppress exceptions generated by this object.
     * False by default.
     * @var bool
     */
    public $suppressExceptions;
    
    /**
     * The last exception that has been generated by this object.
     * @var \Exception;
     */
    public $exception;
    
    /**
     * Whether to set curl option CURLOPT_SSL_VERIFYPEER to false.
     * See the description of this class.
     * False by default.
     * @var bool
     */
    public $sslVerifyPeer;
    
    /**
     * Array of allowed MIME Types.
     * @var string[]
     */
    public $allowedMimeTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
    ];
    
    /**
     * Creates the object.
     */
    public function __construct()
    {
        $this->init();
    }
    
    /**
     * Initializes the object.
     */
    public function init()
    {
        $this->replace = false;
        $this->mkdir = true;
        $this->dirMode = 0775;
        $this->imgMode = 0644;
        $this->suppressExceptions = false;
        $this->sslVerifyPeer = false;
    }
    
    /**
     * Validates parameters.
     * @param string $url The URL of a remote file.
     * @param string $name The name of the created file.
     * @throws \InvalidArgumentException If the validation is failed.
     */
    protected function validate($url, $name)
    {
        if (filter_var($url, FILTER_VALIDATE_URL) === false) {
            throw new \InvalidArgumentException(
                'The \'url\' parameter is not a valid URL'
            );
        }
        
        $this->url = $url;
        $pathinfo = pathinfo($name);
        
        if (!isset($pathinfo['dirname'])) {
            throw new \InvalidArgumentException(
                'The \'name\' parameter is not valid. \'dirname\' not found.'
            );
        }
        if (!isset($pathinfo['basename'])) {
            throw new \InvalidArgumentException(
                'The \'name\' parameter is not valid. \'basename\' not found.'
            );
        }
        
        $this->dir = $pathinfo['dirname'];
        $this->name = $pathinfo['basename'];
    }
    
    /**
     * Downloads image and saves it to file system.
     * @throws \Exception If any error occurs.
     */
    protected function downloadInternal()
    {
        $ch = curl_init();
        
        curl_setopt($ch, CURLOPT_URL, $this->url);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        
        if ($this->sslVerifyPeer) {
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        }
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
        curl_close($ch);
        
        if ($httpCode != 200) {
            throw new \Exception(
                'HTTP status code is \'' . $httpCode . '\' instead of 200.'
            );
        }
        
        if (!$response) {
            throw new \Exception('The response is empty.');
        }
        
        $finfo = new \finfo(FILEINFO_MIME_TYPE);
        $mimeType = $finfo->buffer($response);
        
        if (!in_array($mimeType, $this->allowedMimeTypes, true)) {
            throw new \Exception('The image is not a required type.');
        }
        
        if (!file_exists($this->dir)) {
            if ($this->mkdir) {
                if (!mkdir($this->dir, $this->dirMode, true)) {
                    throw new \Exception(
                        'Cannot create dir \'' . $this->dir . '\'.'
                    );
                }
            } else {
                throw new \Exception(
                    'The dir \'' . $this->dir . '\' does not exist.'
                );
            }
        }
        
        $fullName = $this->dir . '/' . $this->name;
        
        if (file_exists($fullName)) {
            if (!$this->replace) {
                throw new \Exception('The file \'' . $fullName . '\' already exists');
            }
        }
        
        if (file_put_contents($fullName, $response, LOCK_EX) === false) {
            throw new \Exception('Cannot write file \'' . $this->dir . '\'.');
        }
        
        if (!chmod($fullName, $this->imgMode)) {
            throw new \Exception('Cannot change file mode for \'' . $fullName . '\'.');
        }
    }
    
    /**
     * Downloads image.
     * @param string $url The URL of a remote file.
     * @param string $name The name of the created file.
     * @return bool Whether the saving succeeded.
     * @throws \Exception If any error occurs.
     */
    public function download($url, $name)
    {
        try {
            $this->validate($url, $name);
            $this->downloadInternal();
        } catch (\Exception $e) {
            $this->exception = $e;
            if (!$this->suppressExceptions) {
                throw $e;
            }
            return false;
        }
        return true;
    }
}
